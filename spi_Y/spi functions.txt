#define RREG 0x80
#define WREG 0x7F
#define SPI_BUFSIZE 8*3*9
#define CS_PIN NRF_GPIO_PIN_MAP(0,11)

uint8_t spi_tx_buf[SPI_BUFSIZE]={1,2,3};
uint8_t spi_rx_buf[SPI_BUFSIZE];
char dataout1[5]={0};

/**
*the function for writing a value to a register:
**/
static void adsWreg (uint8_t reg, uint8_t val)
{
  uint8_t var[2];
  //nrf_delay_ms(1);
  //see pages 40,43 of datasheet
  //nrf_gpio_pin_clear(CS_PIN);
  var[0] = (WREG & reg);
  var[1] = val;
  while(nrf_drv_spi_transfer(&spi,var,2,NULL,0) != NRF_SUCCESS){}
  //nrf_delay_ms(1);
  //nrf_gpio_pin_set(CS_PIN);
}


/**
*the function for reading a value from a register:
**/
int adsRreg(int reg)
{
  uint8_t out = 0;
  uint8_t var;
  var = (RREG | reg);
  //nrf_gpio_pin_clear(CS_PIN);
  dataout1[0] = var;

  var = 0;
  dataout1[1] = 0x00;
  dataout1[2] = 0xFF;

  while(nrf_drv_spi_transfer(&spi,dataout1,2,spi_rx_buf,2) != NRF_SUCCESS){}
  //nrf_delay_ms(1);
  //nrf_gpio_pin_set(CS_PIN);
  return((int) spi_rx_buf[1]);

}

void adsBootup(void)
{
  nrf_delay_ms(2500);
  nrf_gpio_cfg_output(CS_PIN);
  nrf_gpio_pin_set(CS_PIN);
}